
project boost/requests
    : requirements
      <define>BOOST_FILESYSTEM_NO_DEPRECATED=1
      <link>shared:<define>BOOST_REQUESTS_DYN_LINK=1
      <link>static:<define>BOOST_REQUESTS_STATIC_LINK=1
      <define>BOOST_REQUESTS_SOURCE=1
      <define>BOOST_FILESYSTEM_NO_DEPRECATED=1
    : usage-requirements
      <link>shared:<define>BOOST_REQUESTS_DYN_LINK=1
      <link>static:<define>BOOST_REQUESTS_STATIC_LINK=1
    : source-location ../src
    ;

alias requests_deps
   : usage-requirements
     <library>/boost//container/<warnings-as-errors>off
   ;

alias requests_sources
   : src.cpp
   : usage-requirements
     <library>/boost//container/<warnings-as-errors>off
   ;

explicit requests_deps requests_sources ;

import os ;
import path ;
import ac ;

lib ssl ;
lib crypto ;
lib crypt32 ;

# Microsoft Windows section. Refer to FAQ "Windows and OpenSSL"
if [ os.name ] = NT
{
  local OPENSSL_ROOT_DEFAULT = "C:/OpenSSL" ;
  local OPENSSL_ROOT_ENV = [ os.environ OPENSSL_ROOT ] ;
  local OPENSSL_ROOT = "" ;
  if $(OPENSSL_ROOT_ENV)
    {
       OPENSSL_ROOT = $(OPENSSL_ROOT_ENV) ;
    }
  else
    {
      OPENSSL_ROOT = $(OPENSSL_ROOT_DEFAULT) ;
    }
  project
    : requirements
      <include>$(OPENSSL_ROOT)/include
      <variant>debug:<library-path>$(OPENSSL_ROOT)/lib
      <target-os>windows<variant>debug:<library-path>$(OPENSSL_ROOT)/debug/lib
      <variant>release:<library-path>$(OPENSSL_ROOT)/lib
    ;

  if [ path.exists $(OPENSSL_ROOT)/lib/libssl.lib ]
    {
      echo "OpenSSL > 1.1.0. Including libssl" ;
      lib ssl : : <target-os>windows <name>libssl ;
    }
  if [ path.exists $(OPENSSL_ROOT)/lib/libcrypto.lib ]
    {
      echo "OpenSSL > 1.1.0. Including libcrypto" ;
      lib crypto : : <target-os>windows <name>libcrypto ;
    }
  if [ path.exists $(OPENSSL_ROOT)/lib/ssleay32.lib ]
    {
      echo "OpenSSL < 1.1.0. Including ssleay32" ;
      lib ssl : : <target-os>windows <name>ssleay32 ;
    }
  if [ path.exists $(OPENSSL_ROOT)/lib/libeay32.lib ]
    {
      echo "OpenSSL < 1.1.0. Including libeay32" ;
      lib crypto : : <target-os>windows <name>libeay32 ;
    }
}

lib boost_requests
   : requests_sources crypto ssl /boost//url /boost//json
   : requirements 

    [ ac.check-library ssl    : <library>ssl/<link>shared : <build>no ]
    [ ac.check-library crypto : <library>crypto/<link>shared : <build>no ]
    <boost.requests.use-std-fs>off:<library>/boost//filesystem
   : usage-requirements
      <library>/boost//container/<warnings-as-errors>off

   ;

boost-install boost_requests ;