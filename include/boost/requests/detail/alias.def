auto get(target_view target,
          request_type req = {}) -> response
{
  return request(http::verb::get, target, empty{}, std::move(req));
}

auto get(target_view target,
          request_type req,
         system::error_code & ec) -> response
{
  return request(http::verb::get, target, empty{}, std::move(req), ec);
}

auto head(target_view target,
           request_type req = {}) -> response
{
  return request(http::verb::head, target, empty{}, std::move(req));
}

auto head(target_view target,
           request_type req,
          system::error_code & ec) -> response
{
  return request(http::verb::head, target, empty{}, std::move(req), ec);
}

template<typename RequestBody>
auto post(target_view target,
          RequestBody && request_body,
           request_type req = {}) -> response
{
  return request(http::verb::post, target, std::forward<RequestBody>(request_body), std::move(req));
}

template<typename RequestBody>
auto post(target_view target,
          RequestBody && request_body,
           request_type req,
          system::error_code & ec) -> response
{
  return request(http::verb::post, target, std::forward<RequestBody>(request_body), std::move(req), ec);
}


template<typename RequestBody>
auto put(target_view target,
         RequestBody && request_body,
          request_type req = {}) -> response
{
  return request(http::verb::put, target, std::forward<RequestBody>(request_body), std::move(req));
}

template<typename RequestBody>
auto put(target_view target,
         RequestBody && request_body,
          request_type req,
         system::error_code & ec) -> response
{
  return request(http::verb::put, target, std::forward<RequestBody>(request_body), std::move(req), ec);
}


template<typename RequestBody>
auto patch(target_view target,
           RequestBody && request_body,
            request_type req = {}) -> response
{
  return request(http::verb::patch, target, std::forward<RequestBody>(request_body), std::move(req));
}

template<typename RequestBody>
auto patch(target_view target,
           RequestBody && request_body,
            request_type req,
           system::error_code & ec) -> response
{
  return request(http::verb::patch, target, std::forward<RequestBody>(request_body), std::move(req), ec);
}

template<typename RequestBody>
auto delete_(target_view target,
             RequestBody && request_body,
              request_type req = {}) -> response
{
  return request(http::verb::delete_, target, std::forward<RequestBody>(request_body), std::move(req));
}

template<typename RequestBody>
auto delete_(target_view target,
             RequestBody && request_body,
              request_type req,
             system::error_code & ec) -> response
{
  return request(http::verb::delete_, target, std::forward<RequestBody>(request_body), std::move(req), ec);
}


template<typename RequestBody>
auto delete_(target_view target,
              request_type req = {}) -> response
{
  return request(http::verb::delete_, target, empty{}, std::move(req));
}

template<typename RequestBody>
auto delete_(target_view target,
              request_type req,
             system::error_code & ec) -> response
{
  return request(http::verb::delete_, target, empty{}, std::move(req), ec);
}


template<typename RequestBody>
auto connect(target_view target,
              request_type req = {}) -> response
{
  return request(http::verb::connect, target, empty{}, std::move(req));
}

template<typename RequestBody>
auto connect(target_view target,
              request_type req,
             system::error_code & ec) -> response
{
  return request(http::verb::connect, target, empty{}, std::move(req), ec);
}


template<typename RequestBody>
auto options(target_view target,
              request_type req = {}) -> response
{
  return request(http::verb::options, target, empty{}, std::move(req));
}

template<typename RequestBody>
auto options(target_view target,
              request_type req,
             system::error_code & ec) -> response
{
  return request(http::verb::options, target, empty{}, std::move(req), ec);
}


template<typename RequestBody>
auto trace(target_view target,
            request_type req = {}) -> response
{
  return request(http::verb::trace, target, empty{}, std::move(req));
}

template<typename RequestBody>
auto trace(target_view target,
            request_type req,
           system::error_code & ec) -> response
{
  return request(http::verb::trace, target, empty{}, std::move(req), ec);
}

template< BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_get(target_view target,
           request_type req = {},
          CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::get, target, empty{}, std::move(req),
                       std::forward<CompletionToken>(completion_token));
}

template< BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_head(target_view target,
            request_type req  = {},
           CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::head, target,
                       empty{}, std::move(req),
                       std::forward<CompletionToken>(completion_token));
}

template< typename RequestBody,
          BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_post(target_view target,
           RequestBody && request_body,
            request_type req  = {},
           CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::post, target,
                       std::forward<RequestBody>(request_body), std::move(req),
                       std::forward<CompletionToken>(completion_token));
}

template< typename RequestBody,
          BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_put(target_view target,
          RequestBody && request_body,
           request_type req  = {},
          CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::put, target,
                       std::forward<RequestBody>(request_body), std::move(req),
                       std::forward<CompletionToken>(completion_token));
}

template< typename RequestBody,
          BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_patch(target_view target,
            RequestBody && request_body,
             request_type req  = {},
            CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::patch, target,
                       std::forward<RequestBody>(request_body), std::move(req),
                       std::forward<CompletionToken>(completion_token));
}

template< typename RequestBody,
          BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_delete(target_view target,
             RequestBody && request_body,
              request_type req = {},
             CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::delete_, target,
                       std::forward<RequestBody>(request_body), std::move(req),
                       std::forward<CompletionToken>(completion_token));
}


template< typename RequestBody,
          BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_delete(target_view target,
              request_type req  = {},
             CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::delete_, target,
                       empty{}, std::move(req),
                       std::forward<CompletionToken>(completion_token));
}


template< BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_connect(target_view target,
               request_type req  = {},
              CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::connect, target,
                       empty{}, std::move(req),
                       std::forward<CompletionToken>(completion_token));
}


template< BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_options(target_view target,
               request_type req  = {},
              CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::options, target,
                       empty{}, std::move(req),
                       std::forward<CompletionToken>(completion_token));
}


template< BOOST_ASIO_COMPLETION_TOKEN_FOR(void (boost::system::error_code,
                                               response)) CompletionToken
              BOOST_ASIO_DEFAULT_COMPLETION_TOKEN_TYPE(executor_type)>
BOOST_ASIO_INITFN_AUTO_RESULT_TYPE(CompletionToken,
                                   void (boost::system::error_code, response))
async_trace(target_view target,
             request_type req  = {},
            CompletionToken && completion_token BOOST_ASIO_DEFAULT_COMPLETION_TOKEN(executor_type))
{
  return async_request(http::verb::trace, target,
                       empty{}, std::move(req),
                       std::forward<CompletionToken>(completion_token));
}
