#
# Copyright (c) 2023 Klemens Morgenstern (klemens.morgenstern@gmx.net)
#
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)
#
# Official repository: https://github.com/boostorg/json
#

import feature ;
import boost ; 

build-project example ;
build-project test ;

boost.use-project ;

# Microsoft Windows section. Refer to FAQ "Windows and OpenSSL"
if [ os.name ] = NT
{
  local OPENSSL_ROOT_DEFAULT = "C:/OpenSSL" ;
  local OPENSSL_ROOT_ENV = [ os.environ OPENSSL_ROOT ] ;
  local OPENSSL_ROOT = "" ;
  if $(OPENSSL_ROOT_ENV)
    {
       OPENSSL_ROOT = $(OPENSSL_ROOT_ENV) ;
    }
  else
    {
      OPENSSL_ROOT = $(OPENSSL_ROOT_DEFAULT) ;
    }
  project
    : requirements
      <include>$(OPENSSL_ROOT)/include
      <variant>debug:<library-path>$(OPENSSL_ROOT)/lib
      <target-os>windows<variant>debug:<library-path>$(OPENSSL_ROOT)/debug/lib
      <variant>release:<library-path>$(OPENSSL_ROOT)/lib
    ;

  if [ path.exists $(OPENSSL_ROOT)/lib/libssl.lib ]
    {
      echo "OpenSSL > 1.1.0. Including libssl" ;
      lib ssl : : <target-os>windows <name>libssl ;
    }
  if [ path.exists $(OPENSSL_ROOT)/lib/libcrypto.lib ]
    {
      echo "OpenSSL > 1.1.0. Including libcrypto" ;
      lib crypto : : <target-os>windows <name>libcrypto ;
    }
  if [ path.exists $(OPENSSL_ROOT)/lib/ssleay32.lib ]
    {
      echo "OpenSSL < 1.1.0. Including ssleay32" ;
      lib ssl : : <target-os>windows <name>ssleay32 ;
    }
  if [ path.exists $(OPENSSL_ROOT)/lib/libeay32.lib ]
    {
      echo "OpenSSL < 1.1.0. Including libeay32" ;
      lib crypto : : <target-os>windows <name>libeay32 ;
    }
}


feature.feature boost.requests.separate-compilation : on off : propagated composite ;
feature.compose <boost.requests.separate-compilation>on : <define>BOOST_REQUESTS_SEPARATE_COMPILATION ;

feature.feature boost.requests.use-std-fs : off on : propagated composite ;
feature.compose <boost.requests.use-std-fs>on : <define>BOOST_REQUESTS_USE_STD_FS ;
